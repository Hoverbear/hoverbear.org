<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Hoverbear - Nix</title>
        <link>https://hoverbear.org</link>
        <description>A computer scientist working in open source towards a more hopeful future.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://hoverbear.org/tags/nix/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 06 Dec 2022 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Nix on the Steam Deck</title>
            <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/nix-on-the-steam-deck/</link>
            <guid>https://hoverbear.org/blog/nix-on-the-steam-deck/</guid>
            <description>&lt;p&gt;When I first started using Linux in 2006 I remember dreaming of a Linux Console. The idea maybe wasn&#x27;t so far fetched at the time, the PlayStation 3 had just been released with OtherOS support which allowed users to install Linux (or BSD). Still, it seemed that a Linux-first console would only ever be a dream. Now in 2022, Valve&#x27;s Steam Deck is a hackable Linux-first portable console.&lt;&#x2F;p&gt;
&lt;p&gt;Today, we&#x27;ll be putting Nix on it, because what&#x27;s Linux without Nix?&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Declarative GNOME configuration with NixOS</title>
            <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/declarative-gnome-configuration-in-nixos/</link>
            <guid>https://hoverbear.org/blog/declarative-gnome-configuration-in-nixos/</guid>
            <description>&lt;p&gt;I &lt;em&gt;adore&lt;&#x2F;em&gt; tinkering with my machine, trying new tools, extensions, themes, and ideas. When I was younger, it was simply a way to learn. Now, it&#x27;s a way for me to refine my workspace and bring myself small joys.&lt;&#x2F;p&gt;
&lt;p&gt;While tinkering can be fun, it can be a chore to set up a new machine, keep configurations up to date between machines, or even just remember to keep up to date backups. We&#x27;ve previously explored how to create &lt;a href=&quot;&#x2F;blog&#x2F;configurable-nix-packages&#x2F;&quot;&gt;&lt;strong&gt;Configurable Nix packages&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, which solves the problem for things like &lt;code&gt;neovim&lt;&#x2F;code&gt;, but what about when a package isn&#x27;t practically configurable?&lt;&#x2F;p&gt;
&lt;p&gt;What about when we want to configure a whole desktop environment? While &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;NixOS&lt;&#x2F;a&gt; offers configuration settings like &lt;code&gt;services.gnome.gnome-keyring.enable&lt;&#x2F;code&gt; for systemwide features, there&#x27;s a void of knobs when you want to set things like user-specific GNOME &#x27;Favorite Apps&#x27; or extensions.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s explore a useful addition to your NixOS configuration: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nix-community.github.io&#x2F;home-manager&#x2F;&quot;&gt;Home Manager&lt;&#x2F;a&gt; and its &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Projects&#x2F;dconf&quot;&gt;&lt;code&gt;dconf&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; module.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Configurable Nix packages</title>
            <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/configurable-nix-packages/</link>
            <guid>https://hoverbear.org/blog/configurable-nix-packages/</guid>
            <description>&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;tree&#x2F;98f82e9c35aaf1eb32f0d8787e948da5ca970449&#x2F;pkgs&#x2F;applications&#x2F;editors&#x2F;vim&quot;&gt;&lt;code&gt;vim&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;tree&#x2F;98f82e9c35aaf1eb32f0d8787e948da5ca970449&#x2F;pkgs&#x2F;applications&#x2F;editors&#x2F;neovim&quot;&gt;&lt;code&gt;neovim&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; packages in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&quot;&gt;Nixpkgs&lt;&#x2F;a&gt; allow users to set custom configuration, including their &lt;code&gt;customRC&lt;&#x2F;code&gt; and any plugins they might want.&lt;&#x2F;p&gt;
&lt;p&gt;How do they accomplish it?&lt;&#x2F;p&gt;
&lt;p&gt;In this article, we&#x27;ll explore how to create packages with similar behavior. We&#x27;ll create a simple Rust app that consumes a configuration file, then create a Nix flake containing both an unwrapped binary package as well as a configurable package.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Flake for your Crate</title>
            <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/a-flake-for-your-crate/</link>
            <guid>https://hoverbear.org/blog/a-flake-for-your-crate/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;edolstra.github.io&#x2F;pubs&#x2F;phd-thesis.pdf&quot;&gt;Nix (PDF)&lt;&#x2F;a&gt; provides users a way to access the massive &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&quot;&gt;Nixpkgs&lt;&#x2F;a&gt; library of packages, create reproducable builds of software, roll slim containers, create declarative VMs, or run their whole machines. A new feature of Nix, &lt;em&gt;Flakes&lt;&#x2F;em&gt;, is bringing a convention to how projects like Rust crates can be accessed, integrated, and used within Nix (or NixOS.)&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s explore how we can make our Rust crate usable as a Nix flake. At the end of this, any &lt;code&gt;nix&lt;&#x2F;code&gt; user with Flakes enabled should be able to run your project with something like &lt;code&gt;nix run github:user&#x2F;project&lt;&#x2F;code&gt;. They&#x27;ll be able to add your repository as a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Overlays&quot;&gt;Nix overlay&lt;&#x2F;a&gt;, install the package, do interactive builds, or create a portable bundle of it.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using rust-bindgen in Nix</title>
            <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/rust-bindgen-in-nix/</link>
            <guid>https://hoverbear.org/blog/rust-bindgen-in-nix/</guid>
            <description>&lt;p&gt;While building the Nix packages for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zombodb&#x2F;plrust&quot;&gt;pl&#x2F;Rust&lt;&#x2F;a&gt; I bumped into a curious issue: I couldn&#x27;t link to &lt;code&gt;stdio.h&lt;&#x2F;code&gt;, or &lt;code&gt;stdbool.h&lt;&#x2F;code&gt;! They were clearly on my path, too.&lt;&#x2F;p&gt;
&lt;p&gt;It flummoxed me for quite some time, but exploring the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;master&#x2F;pkgs&#x2F;applications&#x2F;networking&#x2F;browsers&#x2F;firefox&#x2F;common.nix#L247-L253&quot;&gt;&lt;code&gt;firefox&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; package led to a way forward. It was &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-bindgen&quot;&gt;&lt;code&gt;rust-bindgen&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; not finding libraries!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Custom live media with Nix flakes</title>
            <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/nix-flake-live-media/</link>
            <guid>https://hoverbear.org/blog/nix-flake-live-media/</guid>
            <description>&lt;p&gt;I&#x27;ve always been quite fond of booting live media. To test or install a new operating system, to recover an old one, find some privacy, or to do a myriad of other specialized tasks. LiveUSBs and liveCDs introduced to me a new way of thinking about my computer.&lt;&#x2F;p&gt;
&lt;p&gt;It improved my mental model of the separation of between the machine, the UEFI (or BIOS), any bootloaders, and the operating system itself.&lt;&#x2F;p&gt;
&lt;p&gt;As I learnt about them over 15 years ago I spent months exploring ways to use them. I used them to rescue systems for myself and others, diagnose hardware, recovery files, and quickly set up machines. &lt;&#x2F;p&gt;
&lt;p&gt;With Nix flakes, we can define a custom live system and build it with minimal steps. This NixOS live system which could be a composition of existing NixOS modules, or an entirely new configuration.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
