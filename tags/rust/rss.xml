<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Hoverbear - Rust</title>
        <link>https://hoverbear.org</link>
        <description>A computer scientist working in open source towards a more hopeful future.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://hoverbear.org/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 20 Sep 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Forging SQL from Rust</title>
            <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/forging-sql-from-rust/</link>
            <guid>https://hoverbear.org/blog/forging-sql-from-rust/</guid>
            <description>&lt;p&gt;PostgreSQL offers an extension interface, and it&#x27;s my belief that Rust is a fantastic language to write extensions for it. &lt;a href=&quot;twitter.com&#x2F;zombodb&quot;&gt;Eric Ridge&lt;&#x2F;a&gt; thought so too, and started &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zombodb&#x2F;pgx&quot;&gt;&lt;code&gt;pgx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; awhile back. I&#x27;ve been working with him to improve the toolkit, and wanted to share about one of our latest hacks: improving the generation of extension SQL code to interface with Rust.&lt;&#x2F;p&gt;
&lt;p&gt;This post is more on the advanced side, as it assumes knowledge of both Rust and PostgreSQL. We&#x27;ll approach topics like foreign functions, dynamic linking, procedural macros, and linkers.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Optional Arguments in Rust</title>
            <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/optional-arguments/</link>
            <guid>https://hoverbear.org/blog/optional-arguments/</guid>
            <description>&lt;p&gt;When designing an API for your crate one topic which can come is how to handle optional arguments. Let&#x27;s explore our &lt;code&gt;Option&lt;&#x2F;code&gt;s in Rust!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Path to Rust on the Web</title>
            <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/the-path-to-rust-on-the-web/</link>
            <guid>https://hoverbear.org/blog/the-path-to-rust-on-the-web/</guid>
            <description>&lt;p&gt;Recently there has been quite a bit of talk about &lt;em&gt;WebAssembly&lt;&#x2F;em&gt;, a new format for code for the web. It is a compile target for languages like C and Rust that enables us to write, and run, code from these languages in our browser.&lt;&#x2F;p&gt;
&lt;p&gt;In the interest of learning more about this technology (and to avoid writing more Javascript) let&#x27;s explore together and get our hands dirty!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;&#x2F;strong&gt; WebAssembly is stabilized, but most implementations are not. The information contained here may become out of date or be incorrect, despite working at the time of writing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Setting up a Rust Development Environment</title>
            <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/setting-up-a-rust-devenv/</link>
            <guid>https://hoverbear.org/blog/setting-up-a-rust-devenv/</guid>
            <description>&lt;p&gt;In this post we&#x27;ll be discussing one way to set up your machine for Rust development. There are different ways, particularly related to the text editor, so feel free to skip what is irrelevant to you. We&#x27;ll focus on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up Rust via Rustup.&lt;&#x2F;li&gt;
&lt;li&gt;Valuable tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; and &lt;code&gt;rustfmt&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Configuring VS Code for Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Debugging with the command line and inside of VS Code.&lt;&#x2F;li&gt;
&lt;li&gt;Using different compile targets.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Everything we do should be functional on both Linux and MacOS, on Windows your mileage may vary. I, unfortunately, don&#x27;t have a Windows instance to test on.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Future with Futures</title>
            <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/the-future-with-futures/</link>
            <guid>https://hoverbear.org/blog/the-future-with-futures/</guid>
            <description>&lt;p&gt;Recently there has been a lot of progress in the Rust language towards a robust asynchronous stack. In this article we&#x27;ll take a look at what these things are, take a tour of what&#x27;s available, play with some examples, and talk about how the pieces fit together.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll get started with the &lt;code&gt;futures&lt;&#x2F;code&gt; crate to start, move on to &lt;code&gt;futures_cpupool&lt;&#x2F;code&gt;, and then eventually to &lt;code&gt;tokio&lt;&#x2F;code&gt;. We will assume you have some knowledge of programming, and have at least thought about trying Rust before.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Pretty State Machine Patterns in Rust</title>
            <pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/rust-state-machine-pattern/</link>
            <guid>https://hoverbear.org/blog/rust-state-machine-pattern/</guid>
            <description>&lt;p&gt;Lately I&#x27;ve been thinking a lot about the &lt;em&gt;patterns&lt;&#x2F;em&gt; and &lt;em&gt;structures&lt;&#x2F;em&gt; which we program with. It&#x27;s really wonderful to start exploring a project and see familiar patterns and styles which you&#x27;ve already used before. It makes it easier to understand the project, and empowers you to start working on the project faster.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes you&#x27;re working on a new project and realize that you need to do something in the same way as you did in another project. This &lt;em&gt;thing&lt;&#x2F;em&gt; might not be a functionality or a library, it might not be something which you can encode into some clever macro or small crate. Instead, it may be simply a pattern, or a structural concept which addresses a problem nicely.&lt;&#x2F;p&gt;
&lt;p&gt;One interesting pattern that is commonly applied to problems is that of the &#x27;State Machine&#x27;. Let&#x27;s take some time to consider what exactly we mean when we say that, and why they&#x27;re interesting.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Rust Heroku Buildpack</title>
            <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/heroku-rust-buildpack/</link>
            <guid>https://hoverbear.org/blog/heroku-rust-buildpack/</guid>
            <description>&lt;p&gt;I&#x27;m happy to introduce the first stable version of my Rust Heroku Buildpack!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just looking to get your hands dirty? Look &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hoverbear&#x2F;heroku-buildpack-rust&quot;&gt;&lt;strong&gt;here&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The project was a really interesting learning experience about how &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;heroku.com&#x2F;&quot;&gt;Heroku&lt;&#x2F;a&gt; does things, on &lt;code&gt;bash&lt;&#x2F;code&gt; scripting, and about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brson&#x2F;multirust&#x2F;&quot;&gt;&lt;code&gt;multirust&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which I&#x27;d not used before but now am quite a fan of! (I previously just &lt;code&gt;rustup&lt;&#x2F;code&gt;&#x27;d the newest nightly every few days.)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Understanding Over Guesswork</title>
            <pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/understand-over-guesswork/</link>
            <guid>https://hoverbear.org/blog/understand-over-guesswork/</guid>
            <description>&lt;h1 id=&quot;evolving-how-we-learn-systems-with-lessons-from-programming-in-the-large&quot;&gt;Evolving How We Learn Systems with Lessons from Programming in the Large&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Some bugs are just that+++a one off.  A wayward moth that just happens to be innocently fluttering through the wrong relay at the wrong time.  But some kinds of bugs aren&#x27;t like that.  Instead, they have risen to superstar status, plaguing veterans and newcomers alike.  But what if these aren&#x27;t bugs at all?  What if they are actual deficiencies in safety and robustness offered by the C programming language as a consequence of the degree to which guesswork is introduced.  Here we explore a more explicit approach to systems level programming supported by Rust, which we believe will better promote understanding of design intent, and eliminate some of the guesswork.  Guided by a set of classic, but still relevant, bugs identified almost 15 years ago by Engler, we consider this in the context of the new generation of students learning about systems in a typical OS course, where students often first encounter these deficiencies.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Photos: San Fransisco Trip</title>
            <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/sf-trip-recap/</link>
            <guid>https://hoverbear.org/blog/sf-trip-recap/</guid>
            <description>&lt;p&gt;A selection of images from my trip that I thought I&#x27;d share with the world.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to use one of these for anything at all, just fire me an email and ask!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>The Raft-rs Rust Meetup</title>
            <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/meetup/</link>
            <guid>https://hoverbear.org/blog/meetup/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;air.mozilla.org&#x2F;bay-area-rust-meetup-august-2015&#x2F;video&#x2F;&quot; width=&quot;896&quot; height=&quot;524&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;strong&gt;Wow.&lt;&#x2F;strong&gt; Was that ever fun! I hope that those that came had an equally enjoyable time and everyone got something useful out of it! I sure did!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;slides.com&#x2F;ycoady&#x2F;a-long-long-time-ago&#x2F;&quot;&gt;Yvonne Coady&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ongardie.net&#x2F;static&#x2F;raft-mozilla&#x2F;#&#x2F;&quot;&gt;Diego Ongaro&lt;&#x2F;a&gt; &amp;amp; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;raft.github.io&#x2F;raftscope-replay&#x2F;&quot;&gt;Visualization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;slides.com&#x2F;hoverbear&#x2F;raft-rs#&#x2F;&quot;&gt;Ana Hobden&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;slides.com&#x2F;danburkert&#x2F;simple-kv&quot;&gt;Dan Burkert&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;slides.com&#x2F;alexnewman-2&#x2F;raft-for-realz&quot;&gt;Alex Newman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Exciting Times</title>
            <pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/exciting-times/</link>
            <guid>https://hoverbear.org/blog/exciting-times/</guid>
            <description>&lt;p&gt;The next few weeks are full of excitement and busy-ness! First up is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.meetup.com&#x2F;Rust-Bay-Area&#x2F;events&#x2F;219696985&#x2F;&quot;&gt;Meetup&lt;&#x2F;a&gt; in San Fran &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hoverbear&#x2F;raft-rs&#x2F;issues&#x2F;74&quot;&gt;(See our planning)&lt;&#x2F;a&gt;. I can&#x27;t wait! It will be so fun to meet many people I&#x27;ve already met in IRC and through the community!&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;d like to do something, or show me around the city, let me know! I&#x27;ve never been to the USA before, let alone San Fransisco.&lt;&#x2F;p&gt;
&lt;p&gt;After that I&#x27;m moving into a new place! A friend and I landed a great location for the next year and we&#x27;re looking forward to the changes ahead. Once I&#x27;m settled in classes will be starting and I have a very busy term ahead!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Raft Progress &amp; Examples!</title>
            <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-examples/</link>
            <guid>https://hoverbear.org/blog/raft-examples/</guid>
            <description>&lt;p&gt;We&#x27;ve also got couple nice working examples! Yes, they&#x27;re ready to play with!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can&#x27;t wait, need code? Visit &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hoverbear&#x2F;raft&quot;&gt;Raft&lt;&#x2F;a&gt; and check out the &lt;code&gt;examples&#x2F;&lt;&#x2F;code&gt; directory!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Raft: Tooling &amp; Infra Update</title>
            <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-tooling/</link>
            <guid>https://hoverbear.org/blog/raft-tooling/</guid>
            <description>&lt;p&gt;In preparation for the forthcoming 0.0.1 release of Raft we&#x27;ve taken several forward steps to improve our (already pretty darn cool!) tooling and infrastructure. If you attempt to set up any of these on your own and have issues let me know! I&#x27;d be more than happy to help. You can find our &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hoverbear&#x2F;raft&#x2F;blob&#x2F;master&#x2F;.travis.yml&quot;&gt;&lt;code&gt;.travis.yml&lt;&#x2F;code&gt; here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Raft: New Crates!</title>
            <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-new-crates/</link>
            <guid>https://hoverbear.org/blog/raft-new-crates/</guid>
            <description>&lt;p&gt;We&#x27;ve been resoundingly busy with our &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;raftconsensus.github.io&#x2F;&quot;&gt;Raft&lt;&#x2F;a&gt; implementation after a brief period of calm in the early summer! I&#x27;ll be posting a few bits over the next weeks to help people both learn Rust, and learn about Raft!&lt;&#x2F;p&gt;
&lt;p&gt;As a result of Raft development two new crates have been put together for general consumption! Both of these are macro-centric and lead mainly by James.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Reading Rust Function Signatures</title>
            <pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/reading-rust-function-signatures/</link>
            <guid>https://hoverbear.org/blog/reading-rust-function-signatures/</guid>
            <description>&lt;p&gt;In Rust, function signatures tell a story. Just from glancing at the signature of a function an experienced Rust user can tell much of the functions behaivor.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we&#x27;ll explore some signatures and talk about how to read them and extract information from them. While exploring, you can find many great function signature examples in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;&quot;&gt;Rust API docs&lt;&#x2F;a&gt;. You can play around on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;&quot;&gt;Playpen&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This article assumes some knowledge of Rust, glossing over a bit of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;book&#x2F;README.html&quot;&gt;book&lt;&#x2F;a&gt; should be quite sufficient if you are lacking that but have programmed before.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Collecting Results from Collections</title>
            <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/a-useful-error-pattern/</link>
            <guid>https://hoverbear.org/blog/a-useful-error-pattern/</guid>
            <description>&lt;p&gt;I&#x27;ve been playing around with a new project that uses a lot of collections of results, for example &lt;code&gt;Vec&amp;lt;Result&amp;lt;()&amp;gt;&amp;gt;&lt;&#x2F;code&gt; and asked some folks on Rust if they new a good way of transforming this into a &lt;code&gt;Result&amp;lt;Vec&amp;lt;()&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out, &lt;code&gt;.collect()&lt;&#x2F;code&gt; can do it for you!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Journey into Iterators</title>
            <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/a-journey-into-iterators/</link>
            <guid>https://hoverbear.org/blog/a-journey-into-iterators/</guid>
            <description>&lt;p&gt;One of my favorite features of Rust is iterators. They are a fast, safe, &#x27;lazy&#x27; way of working with data structures, streams, and other more creative applications.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can play along on http:&#x2F;&#x2F;play.rust-lang.org&#x2F; and by browsing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;core&#x2F;iter&#x2F;index.html&quot;&gt;here&lt;&#x2F;a&gt;. This article is not a subtitute for the documentation or experience.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Raft: Status Update</title>
            <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-the-next-generation-3/</link>
            <guid>https://hoverbear.org/blog/raft-the-next-generation-3/</guid>
            <description>&lt;p&gt;In order to celebrate the new &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2015&#x2F;04&#x2F;03&#x2F;Rust-1.0-beta.html&quot;&gt;beta&lt;&#x2F;a&gt; release of Rust, and as part of reporting requirements for my class, I&#x27;m happy to write to you regarding &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hoverbear&#x2F;raft&quot;&gt;hoverbear&#x2F;raft&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Learning Cap&#x27;n Proto RPC</title>
            <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/learning-capn-proto-rpc/</link>
            <guid>https://hoverbear.org/blog/learning-capn-proto-rpc/</guid>
            <description>&lt;p&gt;Awhile ago, I wrote a &lt;a href=&quot;&#x2F;2015&#x2F;02&#x2F;11&#x2F;capn-proto-in-rust&#x2F;&quot;&gt;First Look at Cap&#x27;n Proto&lt;&#x2F;a&gt;. Unfortunately I didn&#x27;t cover how to utilize it&#x27;s RPC capabilities. In Rust, this is via the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dwrensha&#x2F;capnp-rpc-rust&quot;&gt;&lt;code&gt;capnp-rpc-rust&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do that!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Rust, Travis, and Github Pages</title>
            <pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/rust-travis-github-pages/</link>
            <guid>https://hoverbear.org/blog/rust-travis-github-pages/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; is probably my favorite programming language (as the contents of this site suggests). My interests in networks, development operations, and systems programming align strongly with Rust. They&#x27;re pursuing the trifecta: &lt;em&gt;Safe, Fast, Concurrent.&lt;&#x2F;em&gt; It&#x27;s been a great learning journey for me so far and I learnt to write better code in &lt;strong&gt;all&lt;&#x2F;strong&gt; languages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;Github Pages&lt;&#x2F;a&gt; is Github&#x27;s very generous offering of web hosting to your projects. Basically, you create a branch &lt;code&gt;gh-pages&lt;&#x2F;code&gt; and push it to Github, then browse to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hoverbear.github.io&#x2F;raft&quot;&gt;&lt;code&gt;https:&#x2F;&#x2F;$USERNAME.github.io&#x2F;$REPOSITORY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting Acquainted with MIO</title>
            <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/getting-acquainted-with-mio/</link>
            <guid>https://hoverbear.org/blog/getting-acquainted-with-mio/</guid>
            <description>&lt;p&gt;One of my next goals in my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;hoverbear.org&#x2F;tag&#x2F;raft&#x2F;&quot;&gt;Raft&lt;&#x2F;a&gt; project is to tame the &lt;code&gt;tick()&lt;&#x2F;code&gt; with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&quot;&gt;&lt;code&gt;mio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. In this post, we&#x27;ll explore what it is, what it can do, and why it matters. First things first: What is MIO?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIO is a lightweight IO library for Rust with a focus on adding as little overhead as possible over the OS abstractions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Raft: A First Prototype</title>
            <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-update-3/</link>
            <guid>https://hoverbear.org/blog/raft-update-3/</guid>
            <description>&lt;p&gt;As you may have &lt;a href=&quot;&#x2F;2015&#x2F;02&#x2F;05&#x2F;raft-update-1&#x2F;&quot;&gt;previously&lt;&#x2F;a&gt; &lt;a href=&quot;&#x2F;2015&#x2F;02&#x2F;18&#x2F;raft-update-2&#x2F;&quot;&gt;read&lt;&#x2F;a&gt;, I&#x27;ve been working on implementing the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;raftconsensus.github.io&#x2F;&quot;&gt;Raft Distributed Consensus Algorithm&lt;&#x2F;a&gt; in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; for my classes (and fun!).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Raft: Progress on the Log</title>
            <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-update-2/</link>
            <guid>https://hoverbear.org/blog/raft-update-2/</guid>
            <description>&lt;p&gt;I&#x27;ve spent the majority of my free time this last week working on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hoverbear&#x2F;raft&quot;&gt;Raft&lt;&#x2F;a&gt;. As you can see from this &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hoverbear&#x2F;raft&#x2F;issues&#x2F;1&quot;&gt;issue&lt;&#x2F;a&gt; I&#x27;ve been mostly working on the idea of transactions.&lt;&#x2F;p&gt;
&lt;p&gt;A lot has taken shape in the codebase. It still will panic at &lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; about 300ms after you start a node, but &amp;quot;That&#x27;s a feature!&amp;quot;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: All interfaces and code are not final, and are for educational and interest purposes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>First look at Cap&#x27;n Proto in Rust</title>
            <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/capn-proto-in-rust/</link>
            <guid>https://hoverbear.org/blog/capn-proto-in-rust/</guid>
            <description>&lt;p&gt;So, I found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dwrensha&#x2F;capnproto-rust&quot;&gt;this&lt;&#x2F;a&gt; (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dwrensha&#x2F;capnpc-rust&quot;&gt;this&lt;&#x2F;a&gt;, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dwrensha&#x2F;capnp-rpc-rust&quot;&gt;this&lt;&#x2F;a&gt;) &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kentonv.github.io&#x2F;capnproto&#x2F;&quot;&gt;Cap&#x27;n Proto&lt;&#x2F;a&gt; library for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; and wanted to explore it a bit. Unfortunately the documentation is sparse for the library, and I haven&#x27;t played with Cap&#x27;n Proto before.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cap&#x27;n Proto is what&#x27;s billed as a &#x27;Data Interchange Format&#x27; and &#x27;Capability-Based RPC System&#x27;. Or a &#x27;Cerealization Protocol&#x27;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Raft Experiences and Repo Made Public!</title>
            <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-update-1/</link>
            <guid>https://hoverbear.org/blog/raft-update-1/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: I&#x27;ve made &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Hoverbear&#x2F;raft&quot;&gt;Hoverbear&#x2F;raft&lt;&#x2F;a&gt; publicly available &lt;em&gt;(It&#x27;s still not ready)&lt;&#x2F;em&gt;! Feel encouraged to contribute feedback or code via Github or email!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Raft So Far</title>
            <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft-so-far/</link>
            <guid>https://hoverbear.org/blog/raft-so-far/</guid>
            <description>&lt;p&gt;I&#x27;ve been working quite a bit on my Raft implementation over the last few days and I must say it&#x27;s been quite a pleasure to work in Rust, which recently released it&#x27;s 1.0.0-alpha.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the work out of needing to serialize and deserialize data, it enforces data safety, and it&#x27;s type checking is incredible. I&#x27;m very quickly able to make a change, build it, fix the errors the compiler catches for me, and build again, then test. So far the only times my tests have failed after a successful build was when I was accidently disgarding one of my channels.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Raft in Rust</title>
            <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/raft/</link>
            <guid>https://hoverbear.org/blog/raft/</guid>
            <description>&lt;p&gt;I&#x27;m currently working on implementing the Raft Distributed Consensus protocol in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;This is a project I&#x27;m doing for my CSC466 class at the University of Victoria, and I&#x27;m hoping to use it as part of one of my projects for CSC462.&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the project I plan to release it as MIT licensed code. Please stay tuned...&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Parsing Arguments in Rust</title>
            <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/command-line-args-in-rust/</link>
            <guid>https://hoverbear.org/blog/command-line-args-in-rust/</guid>
            <description>&lt;p&gt;I was reading about the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docopt.org&#x2F;&quot;&gt;Docopt&lt;&#x2F;a&gt; project the other day and really liked the standardized approach to &lt;code&gt;--help&lt;&#x2F;code&gt; prompts and argument parsing that it offers.&lt;&#x2F;p&gt;
&lt;p&gt;Luckly, there is a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;docopt&#x2F;docopt.rs&quot;&gt;Rust Package&lt;&#x2F;a&gt; to play with!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Longest Common Increasing Sequence</title>
            <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/lcis/</link>
            <guid>https://hoverbear.org/blog/lcis/</guid>
            <description>&lt;p&gt;A really &#x27;cute&#x27; problem popped up in our Data Structures &amp;amp; Algorithms homework and I wanted to write about it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#x27;re in the class this will obviously ruin the fun, so read it later, after you&#x27;re done!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Command Execution in Rust</title>
            <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/command-execution-in-rust/</link>
            <guid>https://hoverbear.org/blog/command-execution-in-rust/</guid>
            <description>&lt;p&gt;One of my projects over the upcoming semester is to explore the Linux boot process and the job of the init (initialization) system. The init system is considered &lt;strong&gt;PID 1&lt;&#x2F;strong&gt; and is responsible for a significant portion of userspace functionality. Common init systems on Linux are OpenRC and systemd. One of the key parts of an init system is to spawn new processes, like in command shell.&lt;&#x2F;p&gt;
&lt;p&gt;Executing child processes may be useful to any number of programs, but common applications include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shells&lt;&#x2F;li&gt;
&lt;li&gt;Init systems&lt;&#x2F;li&gt;
&lt;li&gt;Launchers&lt;&#x2F;li&gt;
&lt;li&gt;Interfacing with command line applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Option Monads in Rust</title>
            <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/option-monads-in-rust/</link>
            <guid>https://hoverbear.org/blog/option-monads-in-rust/</guid>
            <description>&lt;p&gt;One common monadic structure is the &lt;code&gt;Option&lt;&#x2F;code&gt; (or &lt;code&gt;Maybe&lt;&#x2F;code&gt; in Haskell and other languages) type. This can be seen as an encapsulation type. Consider a function which may fail to produce a meaningful value for certain inputs. For example,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Parses a string into an integer.
&lt;&#x2F;span&gt;  &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;from_str&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;int&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;4&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; A valid input.
&lt;&#x2F;span&gt;  &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;from_str&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;int&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Potato&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Definitely invalid.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
    </channel>
</rss>
