<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Hoverbear Consulting - Tutorials</title>
        <link>https://hoverbear.org</link>
        <description>A computer scientist working in open source towards a more hopeful future.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://hoverbear.org/tags/tutorials/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sun, 19 Jan 2020 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Hierarchical Structures in PostgreSQL</title>
            <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/postgresql-hierarchical-structures/</link>
            <guid>https://hoverbear.org/blog/postgresql-hierarchical-structures/</guid>
            <description>&lt;p&gt;It&#x27;s a common pattern: a database developer at a startup is probably on the Product subteam of the Engineering team at their company. In a department store, shoes are a subcategory of clothing, while your favorite thermos is probably in the travel department.&lt;&#x2F;p&gt;
&lt;p&gt;In any Github organization, there are teams within teams within teams. In any large department store there are categories deeply nested. In any recipe book, there are many ways to classify food.&lt;&#x2F;p&gt;
&lt;p&gt;So how can we model them?&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting the most of WSL</title>
            <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/getting-the-most-out-of-wsl/</link>
            <guid>https://hoverbear.org/blog/getting-the-most-out-of-wsl/</guid>
            <description>&lt;p&gt;Not long ago, Microsoft started iterating more heavily on their long-existing &amp;quot;Windows Subsystem for Linux&amp;quot; feature. The feature has existed for some time, but recently has it become much more usable for everyday Linux development work.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we&#x27;ll investigate some ways to get the most out of WSL. I won&#x27;t present anything new here, just providing a single place for how I or someone else &lt;strong&gt;could&lt;&#x2F;strong&gt; get things set up.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Optional Arguments in Rust</title>
            <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/optional-arguments/</link>
            <guid>https://hoverbear.org/blog/optional-arguments/</guid>
            <description>&lt;p&gt;When designing an API for your crate one topic which can come is how to handle optional arguments. Let&#x27;s explore our &lt;code&gt;Option&lt;&#x2F;code&gt;s in Rust!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Path to Rust on the Web</title>
            <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/the-path-to-rust-on-the-web/</link>
            <guid>https://hoverbear.org/blog/the-path-to-rust-on-the-web/</guid>
            <description>&lt;p&gt;Recently there has been quite a bit of talk about &lt;em&gt;WebAssembly&lt;&#x2F;em&gt;, a new format for code for the web. It is a compile target for languages like C and Rust that enables us to write, and run, code from these languages in our browser.&lt;&#x2F;p&gt;
&lt;p&gt;In the interest of learning more about this technology (and to avoid writing more Javascript) let&#x27;s explore together and get our hands dirty!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;&#x2F;strong&gt; WebAssembly is stabilized, but most implementations are not. The information contained here may become out of date or be incorrect, despite working at the time of writing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Setting up a Rust Development Environment</title>
            <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/setting-up-a-rust-devenv/</link>
            <guid>https://hoverbear.org/blog/setting-up-a-rust-devenv/</guid>
            <description>&lt;p&gt;In this post we&#x27;ll be discussing one way to set up your machine for Rust development. There are different ways, particularly related to the text editor, so feel free to skip what is irrelevant to you. We&#x27;ll focus on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up Rust via Rustup.&lt;&#x2F;li&gt;
&lt;li&gt;Valuable tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; and &lt;code&gt;rustfmt&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Configuring VS Code for Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Debugging with the command line and inside of VS Code.&lt;&#x2F;li&gt;
&lt;li&gt;Using different compile targets.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Everything we do should be functional on both Linux and MacOS, on Windows your mileage may vary. I, unfortunately, don&#x27;t have a Windows instance to test on.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The Future with Futures</title>
            <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/the-future-with-futures/</link>
            <guid>https://hoverbear.org/blog/the-future-with-futures/</guid>
            <description>&lt;p&gt;Recently there has been a lot of progress in the Rust language towards a robust asynchronous stack. In this article we&#x27;ll take a look at what these things are, take a tour of what&#x27;s available, play with some examples, and talk about how the pieces fit together.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll get started with the &lt;code&gt;futures&lt;&#x2F;code&gt; crate to start, move on to &lt;code&gt;futures_cpupool&lt;&#x2F;code&gt;, and then eventually to &lt;code&gt;tokio&lt;&#x2F;code&gt;. We will assume you have some knowledge of programming, and have at least thought about trying Rust before.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Reading Rust Function Signatures</title>
            <pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/reading-rust-function-signatures/</link>
            <guid>https://hoverbear.org/blog/reading-rust-function-signatures/</guid>
            <description>&lt;p&gt;In Rust, function signatures tell a story. Just from glancing at the signature of a function an experienced Rust user can tell much of the functions behaivor.&lt;&#x2F;p&gt;
&lt;p&gt;In this article we&#x27;ll explore some signatures and talk about how to read them and extract information from them. While exploring, you can find many great function signature examples in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;&quot;&gt;Rust API docs&lt;&#x2F;a&gt;. You can play around on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;&quot;&gt;Playpen&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This article assumes some knowledge of Rust, glossing over a bit of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;book&#x2F;README.html&quot;&gt;book&lt;&#x2F;a&gt; should be quite sufficient if you are lacking that but have programmed before.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Journey into Iterators</title>
            <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/a-journey-into-iterators/</link>
            <guid>https://hoverbear.org/blog/a-journey-into-iterators/</guid>
            <description>&lt;p&gt;One of my favorite features of Rust is iterators. They are a fast, safe, &#x27;lazy&#x27; way of working with data structures, streams, and other more creative applications.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can play along on http:&#x2F;&#x2F;play.rust-lang.org&#x2F; and by browsing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;core&#x2F;iter&#x2F;index.html&quot;&gt;here&lt;&#x2F;a&gt;. This article is not a subtitute for the documentation or experience.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>OpenWRT QoS</title>
            <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/openwrt-qos/</link>
            <guid>https://hoverbear.org/blog/openwrt-qos/</guid>
            <description>&lt;p&gt;Using the setup from my &lt;a href=&quot;&#x2F;2014&#x2F;11&#x2F;23&#x2F;openwrt-in-virtualbox&#x2F;&quot;&gt;last&lt;&#x2F;a&gt; &lt;a href=&quot;&#x2F;2014&#x2F;12&#x2F;03&#x2F;vagrant-clients-for-openwrt-vms&#x2F;&quot;&gt;two&lt;&#x2F;a&gt; posts, let&#x27;s play with some QoS parameters and observe the results.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;uci&#x2F;qos&quot;&gt;documentation&lt;&#x2F;a&gt; for OpenWRT&#x27;s QoS is rather lacking, please feel encouraged to improve it as you go!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Vagrant Clients for OpenWRT VMs</title>
            <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/vagrant-clients-for-openwrt-vms/</link>
            <guid>https://hoverbear.org/blog/vagrant-clients-for-openwrt-vms/</guid>
            <description>&lt;p&gt;In my &lt;a href=&quot;&#x2F;2014&#x2F;11&#x2F;23&#x2F;openwrt-in-virtualbox&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt;, we explored how to set up a OpenWRT VM in VirtualBox.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s give it some clients! Since the router is using a &lt;code&gt;intnet&lt;&#x2F;code&gt;s we need to configure some machines to use that as their primary way to connect to the internet.&lt;&#x2F;p&gt;
&lt;p&gt;Since &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;vagrantup.com&#x2F;&quot;&gt;Vagrant&lt;&#x2F;a&gt; has support for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.vagrantup.com&#x2F;v2&#x2F;multi-machine&#x2F;index.html&quot;&gt;multi-machine configurations&lt;&#x2F;a&gt; and gives us &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vagrantcloud.com&#x2F;chef&#x2F;boxes&#x2F;debian-7.4&quot;&gt;minimal builds of machines&lt;&#x2F;a&gt;, we&#x27;ll use this for our clients.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>OpenWRT in Virtualbox</title>
            <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/openwrt-in-virtualbox/</link>
            <guid>https://hoverbear.org/blog/openwrt-in-virtualbox/</guid>
            <description>&lt;p&gt;For my CSC 467 project I&#x27;m studying the configuration and performance of various QoS parameters in OpenWRT.&lt;&#x2F;p&gt;
&lt;p&gt;The plan is to set up an OpenWRT router in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;&quot;&gt;VirtualBox&lt;&#x2F;a&gt; and orcestrate some &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;vagrantup.com&#x2F;&quot;&gt;Vagrant&lt;&#x2F;a&gt; boxes to create a VM network.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A First Look at DACS</title>
            <pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/first-look-at-dacs/</link>
            <guid>https://hoverbear.org/blog/first-look-at-dacs/</guid>
            <description>&lt;p&gt;At Simbioses Lab, we&#x27;ve been recently looking at the federated authentication &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dacs.dss.ca&#x2F;&quot;&gt;DACS&lt;&#x2F;a&gt; as well as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;keycloak.jboss.org&#x2F;&quot;&gt;Keycloak&lt;&#x2F;a&gt;. I&#x27;ve previously written about Keycloak, so let&#x27;s take a look at DACS.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Parsing Arguments in Rust</title>
            <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/command-line-args-in-rust/</link>
            <guid>https://hoverbear.org/blog/command-line-args-in-rust/</guid>
            <description>&lt;p&gt;I was reading about the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docopt.org&#x2F;&quot;&gt;Docopt&lt;&#x2F;a&gt; project the other day and really liked the standardized approach to &lt;code&gt;--help&lt;&#x2F;code&gt; prompts and argument parsing that it offers.&lt;&#x2F;p&gt;
&lt;p&gt;Luckly, there is a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;docopt&#x2F;docopt.rs&quot;&gt;Rust Package&lt;&#x2F;a&gt; to play with!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Longest Common Increasing Sequence</title>
            <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/lcis/</link>
            <guid>https://hoverbear.org/blog/lcis/</guid>
            <description>&lt;p&gt;A really &#x27;cute&#x27; problem popped up in our Data Structures &amp;amp; Algorithms homework and I wanted to write about it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#x27;re in the class this will obviously ruin the fun, so read it later, after you&#x27;re done!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Init - Configuration</title>
            <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/init-configuration/</link>
            <guid>https://hoverbear.org/blog/init-configuration/</guid>
            <description>&lt;p&gt;An initialization system&#x27;s main interface with the user is through it&#x27;s configuration scripts and service files. Let&#x27;s take a look at what this looks like for &lt;code&gt;systemd&lt;&#x2F;code&gt; and OpenRC.&lt;&#x2F;p&gt;
&lt;p&gt;With systemd, daemon configuration is handled by &lt;code&gt;.toml&lt;&#x2F;code&gt; configuration files. With OpenRC, this task is performed by shell scripts.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A Ghost OpenRC Script</title>
            <pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/a-ghost-openrc-script/</link>
            <guid>https://hoverbear.org/blog/a-ghost-openrc-script/</guid>
            <description>&lt;p&gt;Whipped up an OpenRC script for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;Ghost&lt;&#x2F;a&gt;. Feel free to use it for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Things to be aware of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The script was designed for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.funtoo.org&#x2F;Welcome&quot;&gt;Funtoo&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The script expects Ghost to be in &lt;code&gt;$GHOST_ROOT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The script runs Ghost as &lt;code&gt;$GHOST_USER:$GHOST_GROUP&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The script exports the &lt;code&gt;$NODE_ENV&lt;&#x2F;code&gt; to &lt;code&gt;production&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Init - Runlevels and Targets</title>
            <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/init-runlevels-and-targets/</link>
            <guid>https://hoverbear.org/blog/init-runlevels-and-targets/</guid>
            <description>&lt;p&gt;In this post, we&#x27;ll look at how runlevels work in two major init systems, systemd and OpenRC. If you&#x27;re interested in trying out &lt;code&gt;systemd&lt;&#x2F;code&gt;, I&#x27;d suggest using an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.archlinux.org&#x2F;download&#x2F;&quot;&gt;Arch Linux Live ISO&lt;&#x2F;a&gt;. For those interested in trying OpenRC, check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.funtoo.org&#x2F;Funtoo_Linux_Installation&quot;&gt;Funtoo&lt;&#x2F;a&gt;. Both of these will work great in your favorite virtualization solution.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Command Execution in Rust</title>
            <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/command-execution-in-rust/</link>
            <guid>https://hoverbear.org/blog/command-execution-in-rust/</guid>
            <description>&lt;p&gt;One of my projects over the upcoming semester is to explore the Linux boot process and the job of the init (initialization) system. The init system is considered &lt;strong&gt;PID 1&lt;&#x2F;strong&gt; and is responsible for a significant portion of userspace functionality. Common init systems on Linux are OpenRC and systemd. One of the key parts of an init system is to spawn new processes, like in command shell.&lt;&#x2F;p&gt;
&lt;p&gt;Executing child processes may be useful to any number of programs, but common applications include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shells&lt;&#x2F;li&gt;
&lt;li&gt;Init systems&lt;&#x2F;li&gt;
&lt;li&gt;Launchers&lt;&#x2F;li&gt;
&lt;li&gt;Interfacing with command line applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Option Monads in Rust</title>
            <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/option-monads-in-rust/</link>
            <guid>https://hoverbear.org/blog/option-monads-in-rust/</guid>
            <description>&lt;p&gt;One common monadic structure is the &lt;code&gt;Option&lt;&#x2F;code&gt; (or &lt;code&gt;Maybe&lt;&#x2F;code&gt; in Haskell and other languages) type. This can be seen as an encapsulation type. Consider a function which may fail to produce a meaningful value for certain inputs. For example,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212733;color:#ccc9c2;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#ffa759;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd580;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Parses a string into an integer.
&lt;&#x2F;span&gt;&lt;span&gt;  from_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;int&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; A valid input.
&lt;&#x2F;span&gt;&lt;span&gt;  from_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29e74;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;int&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bae67e;&quot;&gt;&amp;quot;Potato&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ccc9c2cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Definitely invalid.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Back Channel Keycloak Requests</title>
            <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/back-channel-keycloak-requests/</link>
            <guid>https://hoverbear.org/blog/back-channel-keycloak-requests/</guid>
            <description>&lt;p&gt;While using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;keycloak.jboss.org&#x2F;&quot;&gt;Keycloak&lt;&#x2F;a&gt; you may need to make authenticated requests between various services. How can this be accomplished with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;immutant.org&#x2F;&quot;&gt;Immutant&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may want to check &lt;a href=&quot;&#x2F;2014&#x2F;07&#x2F;25&#x2F;integrating-immutant-and-keycloak&#x2F;&quot;&gt;this&lt;&#x2F;a&gt; link to learn how to use Immutant with Keycloak.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Integrating Immutant and Keycloak</title>
            <pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/integrating-immutant-and-keycloak/</link>
            <guid>https://hoverbear.org/blog/integrating-immutant-and-keycloak/</guid>
            <description>&lt;p&gt;In my past two posts, we took a &lt;a href=&quot;&#x2F;2014&#x2F;07&#x2F;14&#x2F;starting-with-immutant&#x2F;&quot;&gt;surface level look at Immutant&lt;&#x2F;a&gt; then took a look at &lt;a href=&quot;&#x2F;2014&#x2F;07&#x2F;22&#x2F;deploying-immutant-to-wildfly&#x2F;&quot;&gt;deploying immutant applications to the Wildfly application server.&lt;&#x2F;a&gt; This time, we&#x27;ll take a look at how to integrate Keycloak with an Immutant app, again using Docker heavily.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you haven&#x27;t read the previous few articles, it might be useful to give them a quick glance over.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
        </item>
        <item>
            <title>Deploying Immutant to Wildfly</title>
            <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/deploying-immutant-to-wildfly/</link>
            <guid>https://hoverbear.org/blog/deploying-immutant-to-wildfly/</guid>
            <description>&lt;p&gt;Currently, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;immutant.org&#x2F;tutorials&#x2F;wildfly&#x2F;index.html&quot;&gt;tutorial on deploying to Wildfly with Immutant 2&lt;&#x2F;a&gt; is not written. Furthermore,the JBoss documentation isn&#x27;t particularly tailored towards Clojure applications.&lt;&#x2F;p&gt;
&lt;p&gt;So, let&#x27;s take a look at how to do this using the convenient &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;registry.hub.docker.com&#x2F;u&#x2F;jboss&#x2F;&quot;&gt;dockerfiles provided by the JBoss project&lt;&#x2F;a&gt;. We&#x27;ll use Docker to simplify deployment and setup of Wildfly, but instructions for a non-docker application should be similar.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-a-basic-immutant-application&quot;&gt;Create a basic Immutant application.&lt;&#x2F;h3&gt;
&lt;p&gt;Starting from a &lt;code&gt;lein new app learning&lt;&#x2F;code&gt; command, set up your project like so:&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Arch Docker Baseimage</title>
            <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/arch-docker-baseimage/</link>
            <guid>https://hoverbear.org/blog/arch-docker-baseimage/</guid>
            <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h2&gt;
&lt;p&gt;You need a base image of Arch Linux that you&#x27;re sure is a-okay.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Starting with Immutant</title>
            <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/starting-with-immutant/</link>
            <guid>https://hoverbear.org/blog/starting-with-immutant/</guid>
            <description>&lt;p&gt;Immutant is suite of &lt;strong&gt;Clojure&lt;&#x2F;strong&gt; libraries that is part of the JBossAS&#x2F;Wildfly ecosystem. Great, fantastic! Clojure is a lisp that runs on the JVM, the CLR, and compiles to Javascript. Lets get started!&lt;&#x2F;p&gt;
&lt;p&gt;Some links we&#x27;ll need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;immutant.org&#x2F;&quot;&gt;Immutant&lt;&#x2F;a&gt; - The framework.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;clojure.org&#x2F;&quot;&gt;Clojure&lt;&#x2F;a&gt; - The language.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;leiningen.org&#x2F;&quot;&gt;Leiningen&lt;&#x2F;a&gt; - The package manager.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Async Auto</title>
            <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
            <link>https://hoverbear.org/blog/async-auto/</link>
            <guid>https://hoverbear.org/blog/async-auto/</guid>
            <description>&lt;p&gt;I&#x27;ve been exploring the handy &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;caolan&#x2F;async&quot;&gt;&lt;code&gt;async&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; over the last few days in the lab. One of my projects is a MongoDB API Adapter in Node.js and I was pleased by a novel way of handling control flow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;caolan&#x2F;async#autotasks-callback&quot;&gt;&lt;code&gt;async.auto()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a function offered by the libary which allows you to declare a set of tasks and their dependencies, then the library determines the best way to compose the initialization.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
